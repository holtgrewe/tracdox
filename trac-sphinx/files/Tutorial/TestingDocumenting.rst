Testing and Documentation in SeqAn
----------------------------------

TOC()

The SeqAn Testing System
~~~~~~~~~~~~~~~~~~~~~~~~

The test system is now described at `Tutorial: Writing
Tests <Tutorial/WritingTests>`__.

DDDOC - "Dot-Dot-Doc" - The SeqAn documentation system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

General principles
^^^^^^^^^^^^^^^^^^

The documentation can be viewed as a large hierarchical (tree-like)
structure which is distributed over several files. The files are either
special dddoc files or C++ source files. In the C++ source files
comments starting with ``/**`` or with ``///`` signal areas with dddoc
information. Those files are parsed with python scripts which collect
all information and then generate the documentation. The documentation
is generated by running "make.bat" under Windows or "make.sh" under
Linux or MacOS. As optional arguments modules can be specified, for
which the documentation should be built. If no argument is specified,
the complete documentation is built (if a non-existing modul is
specified, then only the static pages are built). The generated
documentation is in HTML.

Notation
^^^^^^^^

The documentation is built as a tree. Each node in the tree has an
ID-string. A path from the root of the dddoc tree to a node is specified
by the concatenation of the ID-strings of all nodes on the path, e.g.
"animal.pet.dogs.rover". Each node in a dddoc tree contains a (possibly
empty) text. If there exists more than one entry for a node, then the
text entries are concatenated. An entry in the data structure has the
form ".[Pfad]:[Text]". Note, that each entry has to start with a new
line, that means the first character hast to be ".". A path is
interpreted as a subpath of a previous path of the same block if it
starts with dot. If the path starts with n dots, then it refers to the
last path before it starting with n-1 dots. Note that we allow LaTeX
commands in the text (such as \\Sigma, \\in, or \\leftarrow). The list
of all available signs can be found in dddoc\_html\_trans.py.

Example 1:

::

    #cpp
    .animals.pets
    ..dog.waldi
    ...name:waldemar
    ...age:5
    ..cat.minka
    ...age:2

is the same as:

::

    #cpp
    .animals.pets.dog.waldi.name:waldemar
    .animals.pets.dog.waldi.age:5
    .animals.pets.cat.minka.age:2

Example 2:

::

    #cpp
    .address.name:John Smith
    ..comment:This is a comment,
    that spans several linest.
    ..comment:This will be appended to the first comment.

Example 3:

::

    #cpp
    .domains."www.microsoft.com":Microsoft Homepage

Structure of the documentation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Entries
^^^^^^^

The documentation consists of a number of entries. Each entry in dddoc
has a path of the form "[Category].[Name]"

At the moment there are the following categories:

-  "Page": Multi-purpose page, e.g. for tutorials
-  "Concept": SeqAn concepts
-  "Class": C++ classes
-  "Spec": specializations
-  "Shortcut": shortcuts
-  "Function": (global) functions
-  "Memfunc": member functions
-  "Memvar": member variables
-  "Metafunction": metafunctions
-  "Tag": tag
-  "Adaption": adapters
-  "Demo": demo program

In addition there exist the following technical categories:

-  "Internal" is used to document internal entities that are not in the
   SeqAn user interface.
-  "globals" stores metainformation and constants which are used during
   the building of the documentation. Also, the index pages for the
   categories are defined here.

Subcategories can be specified with the "cat"-entry.

[Name]: The name of the documented entity. That means the name of the
function, class, etc. if a name different from the title should be
displayed, the "title"-Field has to be used. If the name contains the
'#'-Sign, then only the string after the first '#'-character is
displayed. This should be used for example in Memfunc and Memvar
entries: Before the '#'-character one write the class name, after the
character the name of the member.

Fields
^^^^^^

Fields define the properties of the entry. A field has a path of the
form: "[Category].[Name].[Field]"

| ``- Special fields: ``
| ``   - "title": Title of page (optional). Default is [Name].``
| ``   - "summary": short description of entry. Use "remarks" or "description" for longer descriptions.``
| ``   - "cat": subcategorie. The documentation of the subcategorie appears in a subfolder under [Category]. An entry can have several subcategories, which will all be in separate subfolders.``
| ``   - "signature": a short piece of code which exemplifies the usage of the entity.``
| ``       example: "length(container)"``
| ``   - "file": displays the source file. You have to specify the path of the .cpp file. Should be used only in demo entries (see below).``
| ``   - "hidefromindex": omit entry in the index.``

| ``- Text fields:``
| ``   - "description": Longer text field. For example used in tutorials. ``
| ``   - "example": example text or codepieces.``
| ``   - "include": name of the header file that should be included before using the entity.``
| ``   - "remarks": comments.``
| ``   - "returns": return value. If several values are returned, one should use the subfield "param" below "return".``
| ``   ``
| ``- Tables of text fields:``
| ``   The children nodes below the table entity are output as text fields in alphabetical order.``
| ``   - "param": function argument. e.g. "..param.length:length of a field"``
| ``   - "value": a value that can be assigned to the entity.``

- Link Fields: - "baseconcept": Link to Concept. If used with Concept:
baseconcept. (inserts backpointer: "childconcept") - "class": Link to
Class or Spec. If used with Memfunc or Memvar: Name of the class
belonging to the entity (inserts backpointer "memfunc" or "memvar") -
"concept": Link to Concept. Concept needs the existence of the entry to
be fulfilled. - "demo": Link to a demo that illustrates the usage of the
entry. (inserts backpointer "demofor") - "general": If used with Spec:
The general class belonging to the entry (inserts backpointer "spec") -
"implements": Concept that the class/spec implements. - "see": crosslink
to another entry. (inserts backpointers "see"). - "base": Link to Class
or Spec. If used with Class or Spec: The base class (inserts
backpointer: "derived") - "shortcutfor": Link to entry for which this
entry is a shortcut for. (inserts backpointers: "shortcut")

::

    #comment
        Es gibt außerdem folgende Link Fields, von deren Benutzung jedoch abgeraten wird, da sich die wechselseitigen Verlinkungen auch mit den oben genannten Link Fields vornehmen lassen:
        (- "demofor": Bei Demo: Link auf in Demo verwendete Entität. (erzeugt Rückverweis "demo"))
        (- "derived": Bei Spec oder Class: Eine Spezialisierung.)
        (- "memfunc": Bei Class oder Spec: Eine Memberfunktion.)
        (- "memvar": Bei Class oder Spec: Eine Membervariable.)
        (- "spec": Bei Class oder Spec: Eine Spezialisierung.)
        (- "type": Bei Class oder Spec: Eine Metafunktion (wird erzeugt als Rückverweis durch "param.[Name].type" in Metafunktion)
        (- "function": Bei Class oder Spec: Eine Funktion (wird erzeugt als Rückverweis durch "param.[Name].type", "returns.type" oder "returns.[Name].type" in Funktion)
        (- "conceptmetafunc", "conceptmemvar", "conceptmemfunc", "conceptfunc", "conceptusedby", : Rückverweise für "concept")
        (- "conceptimplements": Rückverweis für "implements")
        (- "childconcept": Rückverweis für "baseconcept")
        (- "shortcut": Link auf Shortcut. (erzeugt Rückverweis "shortcutfor"))

Subfields
^^^^^^^^^

Children nodes below text fields.

-  Free subfields:

| ``   They are output in the order of occurrence. All other subfields listed here are concatenated and will be displayed under a subsection header.``
| ``   - "section": Inserts header for new section.``
| ``   - "subsection": Inserts header for new subsection.``
| ``   - "text": a text paragraph.``
| ``   - "note": an emphazised text parargraph.``
| ``   - "code": example code.``
| ``   - "image": Inserts a picture. Supplied is the name (optional with a relative path) without extension. The extension ".png" is automatically appended. Pictures should be stored in the "img"-folder. Optionally you can provide a caption after a ":". For example  "..remarks.image:seqan_logo_large:This is the large SeqAn logo."``
| ``   - "table": displays a row of a table. The columns are separated by a "|". Consecutive "table"- and "tableheader"-subfields will be joined to one table.``
| ``   - "tableheader": displays a table header. Consecutive "table"- and "tableheader"-subfields will be joined to one table.``

-  Text subfields:

| ``   - "value": a value.``
| ``   - "default": a default value.``
| ``   - "remarks": comment.``
| ``   ``

-  Table of text subfields:

``   - "param": list of parameters. Is used e.g. with  "returns" to list several return values.``

-  Link subfields:

| ``   - "metafunktion": link to a meta function. Used with "param"- or "return"-fields e.g. those metafunctions, that yield the type of the argument or return value.``
| ``   - "type": link to a type (Class, Spec or Adaption). Used with  "param"- or "return"-fields e.g. the type of the argument or return value. (inserts backpointer: "function" if used with Function, "type" if used with metafunction.)``
| ``   - "concept": link to a concept. Used with "param"-fields e.g. a concept, which has to fulfill the argument. (inserts backpointer: "conceptusedby")``
| ``   - "see": link to another entry. ``
| ``  ``

Links
^^^^^

-  Internal links point to entries and are written as:
   "[Category].[Name]".
-  External links point to URLs and start with "http://\ ".
-  If a text different from "Name" should be displayed as link one can
   use (with internal links) "[Category].[Name].[Displaytext]". With
   external links teh displaytex is put after a "\|"-character, e.g.
   "http://www.microsoft.com|ein Link zu Microsoft".
-  Within text fields or subfields one can insert links by placing them
   between @-characters, e.g. "please click @Class.String.hier@".

Formatting
^^^^^^^^^^

-  Within text fields or subfields one can inserts C++-code by writing
   in between two $. e.g.: $int x$.

Source files
^^^^^^^^^^^^

-  Source files are files that are included by using the field "file".
-  Lines that start with "///" will be set as comments.

For more example have a look at the `HowTo <HowTo/DocumentCode>`__.

Submit a comment
^^^^^^^^^^^^^^^^

If you found a mistake, or have suggestions about an improvement of this
page press:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/TestingDocumenting&type=enhancement
submit your comment]

.. raw:: mediawiki

   {{TracNotice|{{PAGENAME}}}}
